{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.coponent.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchfield","bind","fetch","then","response","json","data","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAEaA,G,YAAO,SAACC,GAAD,OAEhB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,6CAAcN,EAAMI,QAAQG,cCHvBC,G,MAAW,SAACR,GAGrB,OAEI,qBAAKC,UAAU,YAAf,SAA4BD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAC3C,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCRlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyCHG,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAEf,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBAPR,E,gEAUO,IAAD,OAClBC,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,S,mCAK/BE,GACXC,KAAKF,SAAS,CAAEP,YAAaQ,EAAEE,OAAOC,U,+BAG9B,IAAD,EAC2BF,KAAKV,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZY,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASf,EAAYgB,wBAElD,OACE,sBAAKjC,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAEEW,YAAY,iBACZC,aAAcc,KAAKd,eAKrB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAvCVK,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8d2c0d32.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\nexport const Card = (props) => (\n\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{`email: ${props.monster.email}`}</p>\n    </div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n\n\n    return (\n\n        <div className=\"card-list\">{props.monsters.map((monster) => (\n            <Card key={monster.id} monster={monster} />\n        ))}\n        </div>\n    );\n}; ","import React from 'react';\nimport './search-box.style.css';\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\n    <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n\n\n    />\n) ","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.coponent';\nimport { SearchBox } from './components/search-box/search-box.components';\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchfield: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"http://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(data => this.setState({ monsters: data }));\n  }\n\n\n\n  handleChange(e) {\n    this.setState({ searchfield: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchfield } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchfield.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monseters Rolodex</h1>\n        <SearchBox\n\n          placeholder=\"search monster\"\n          handleChange={this.handleChange}\n        />\n\n\n\n        <CardList monsters={filteredMonsters} />\n      </div >\n    );\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}